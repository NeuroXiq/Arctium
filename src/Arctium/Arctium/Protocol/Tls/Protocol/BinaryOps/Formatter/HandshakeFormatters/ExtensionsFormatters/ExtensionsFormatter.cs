using System;
using Arctium.Protocol.Tls.Protocol.HandshakeProtocol.Extensions;
using System.Text;
using System.Collections.Generic;
using Arctium.Protocol.Tls.Protocol.HandshakeProtocol.Extensions.Enum;

namespace Arctium.Protocol.Tls.Protocol.BinaryOps.Formatter.HandshakeFormatters.ExtensionsFormatters
{
    //
    // This class creates from 'HandshakeExtension' array binary list of TLS extensions.
    //
    // format of extensions list:
    // [total length of all '[extension]' (2 bytes) ][extension][extension][extension]....
    // [extension] == [extension type (2 bytes)][data length (2 bytes)][data bytes]
    //                               
    //
    // Formatters in dictionary formats '[extension]' block of bytes. 
    // Every extensiosn have its own formatting class
    //
    //

    public class ExtensionsFormatter
    {
        static readonly Dictionary<HandshakeExtensionType, ExtensionFormatterBase> typeToFormatterMap;

        static ExtensionsFormatter()
        {
            typeToFormatterMap = new Dictionary<HandshakeExtensionType, ExtensionFormatterBase>();

            typeToFormatterMap[HandshakeExtensionType.ServerName] = new ServerNameExtensionFormatter();
            typeToFormatterMap[HandshakeExtensionType.ApplicationLayerProtocolNegotiation] = new ALPNExtensionFormatter();
            typeToFormatterMap[HandshakeExtensionType.EllipticCurves] = new EllipticCurvesExtensionFormatter();
            typeToFormatterMap[HandshakeExtensionType.EcPointFormats] = new ECPointFormatsExtensionFormatter();
        }

        static ExtensionFormatterBase GetFormatter(HandshakeExtensionType type)
        {
            return typeToFormatterMap[type];
        }

        ///<summary>Get formatter extensions length</summary>
        public int GetLength(HandshakeExtension[] extensions)
        {
            if (extensions == null) return 0;
            if (extensions.Length == 0) return 0;

            int totalLength = 0;

            foreach (HandshakeExtension ext in extensions)
            {
                totalLength += GetFormatter(ext.Type).GetLength(ext);
            }

            // type + length for each extension
            totalLength += (4 * extensions.Length);

            //2 == frist 2 bytes of extensions, indicates length of all extensions bytes
            return totalLength + 2;
        }

        // This should write to buffer:
        //                                 +-------------------------------------------------------------------->
        //                                 |.. repeat as many extensions in array ....
        //     on 'offset'in parameter     |                                                         |----this block is generated by formatter (check dictionary above)
        //                                 |                                                         |------------------------|   
        // [all extenions length (2 bytes)]|[extension type (2byte)][extension data length (2 bytes)]|[extension data bytes ] |
        //                                 |                                                         |                        |
        //
        public int GetBytes(byte[] buffer, int offset, HandshakeExtension[] extensions)
        {
            if (extensions == null) return 0;
            if (extensions.Length == 0) return 0;

            // 2 + 2 + 2 == all extensions length (2 bytes) + first extension type (2 bytes) + first extensions length ( 2 bytes )
            int extDataFormatOffset = offset + 2 + 2 + 2;
            int totalLength = 0;

            foreach (HandshakeExtension extToFormat in extensions)
            {
                ExtensionFormatterBase formatter = GetFormatter(extToFormat.Type);

                int formattedLength = formatter.GetBytes(buffer, extDataFormatOffset, extToFormat);
                
                //format ext_type (4 byte before ext_data)
                NumberConverter.FormatUInt16((ushort)extToFormat.Type, buffer, extDataFormatOffset - 4);

                //format ext_data_length (2 bytes before ext_data)
                NumberConverter.FormatUInt16((ushort)formattedLength, buffer, extDataFormatOffset - 2);

                //move to next format offset
                //include 2 + 2 bytes of extension type and length

                extDataFormatOffset += 4 + formattedLength;
                totalLength += 4 + formattedLength;
            }

            //first 2 bytes of extensiosn are length of all formatted extensions vectors 
            NumberConverter.FormatUInt16((ushort)totalLength, buffer, offset);

            return totalLength + 2;
        }
    }
}
