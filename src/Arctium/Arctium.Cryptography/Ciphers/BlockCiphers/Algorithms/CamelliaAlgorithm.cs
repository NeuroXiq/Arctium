using Arctium.Shared.Helpers.Buffers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Arctium.Cryptography.Ciphers.BlockCiphers.Algorithms
{
    public static unsafe class CamelliaAlgorithm
    {
        public class State
        {
            public ulong[] Key;
            public ulong[] KeySchedule;
        }

        public static State Init(byte[] key)
        {
            State state = new State();
            state.Key = new ulong[8];
            state.KeySchedule = new ulong[key.Length == 16 ? 18 : 24];


            if (key.Length == 16)
            {
                MemMap.ToULong16BytesBE(key, 0, state.Key, 0);
            }
            else if (key.Length == 24)
            {
                MemMap.ToULong24BytesBE(key, 0, state.Key, 0);
                state.Key[3] = ~state.Key[3];
            }
            else 
            {
                MemMap.ToULong32BytesBE(key, 0, state.Key, 0);
            }

            ulong kll = state.Key[0] ^ state.Key[2], klr = state.Key[1] ^ state.Key[3];

            Encrypt64(&kll, &klr, sigma[0]);
            Encrypt64(&kll, &klr, sigma[1]);

            kll ^= state.Key[0]; klr ^= state.Key[1];

            Encrypt64(&kll, &klr, sigma[2]);
            Encrypt64(&kll, &klr, sigma[3]);

            state.Key[4] = kll;
            state.Key[5] = klr;

            return state;
        }

        public static void EncryptBlock(State state, byte* input, byte* output)
        {
            ulong l, r, lprim, rprim;
            ulong ll = state.Key[0], lr = state.Key[1], al = state.Key[4], ar = state.Key[5];

            l = MemMap.ToULong8BytesBE(input, 0);
            r = MemMap.ToULong8BytesBE(input, 8);

            l ^= ll;
            r ^= lr;

            Encrypt64(&l, &r, ROL_L(al, ar, 0));
            Encrypt64(&l, &r, ROL_R(al, ar, 0));
            Encrypt64(&l, &r, ROL_L(ll, lr, 15));
            Encrypt64(&l, &r, ROL_R(ll, lr, 15));
            Encrypt64(&l, &r, ROL_L(al, ar, 15));
            Encrypt64(&l, &r, ROL_R(al, ar, 15));

            // FL
            // lprim = l;
            // F(&lprim, ROL_R(al, ar, 15));
            lprim = l;
            rprim = r;
            l = FL(lprim, ROL_L(al, ar, 30));
            r = FL1(rprim, ROL_R(al, ar, 30));
            
            Encrypt64(&l, &r, ROL_L(ll, lr, 45));
            Encrypt64(&l, &r, ROL_R(ll, lr, 45));
            Encrypt64(&l, &r, ROL_L(al, ar, 45));
            Encrypt64(&l, &r, ROL_R(ll, lr, 60));
            Encrypt64(&l, &r, ROL_L(al, ar, 60));
            Encrypt64(&l, &r, ROL_R(al, ar, 60));

            //fl
            // lprim = l;
            // F(&lprim, ROL_R(al, ar, 60));
            lprim = l;
            rprim = r;
            l = FL(lprim, ROL_L(ll, lr, 77));
            r = FL1(rprim, ROL_R(ll, lr, 77));

            Encrypt64(&l, &r, ROL_L(ll, lr, 94));
            Encrypt64(&l, &r, ROL_R(ll, lr, 94));
            Encrypt64(&l, &r, ROL_L(al, ar, 94));
            Encrypt64(&l, &r, ROL_R(al, ar, 94));
            Encrypt64(&l, &r, ROL_L(ll, lr, 111));
            Encrypt64(&l, &r, ROL_R(ll, lr, 111));

            r ^= ROL_L(al, ar, 111);
            l ^= ROL_R(al, ar, 111);

            MemMap.ToBytes1ULongBE(l, output, 0);
            MemMap.ToBytes1ULongBE(r, output, 8);
        }

        static ulong FL(ulong a, ulong k)
        {
            uint xl = (uint)(a >> 32);
            uint xr = (uint)a;
            uint kl = (uint)(k >> 32);
            uint kr = (uint)k;

            uint xlkl = ((xl & kl));
            uint yr = ((xlkl << 1) | (xlkl >> 31)) ^ xr;
            uint yl = (yr | kr) ^ xl;

            return ((ulong)yl << 32) | ((ulong)yr);
        }

        static ulong FL1(ulong a, ulong k)
        {
            uint kr = (uint)k;
            uint kl = (uint)(k >> 32);
            uint yl = (uint)(a >> 32);
            uint yr = (uint)(a);

            uint xl = (yr | kr) ^ yl;
            uint xlkl = (xl & kl);
            uint xr = ((xlkl << 1) | (xlkl >> 31)) ^ yr;

            return ((ulong)xl << 32) | (ulong)xr;
        }

        static ulong ROL_L(ulong l, ulong r, int k)
        {
            ulong cc = l;

            if (k >= 64)
            {
                k -= 64;
                l = r;
                r = cc;
            }

            if (k == 0) return l;

            ulong newl = (l << k) | (r >> (64 - k));
            ulong newr = (r << k) | (l >> (64 - k));

            return newl;
        }

        static ulong ROL_R(ulong l, ulong r, int k)
        {
            ulong cc = l;

            if (k >= 64)
            {
                k -= 64;
                l = r;
                r = cc;
            }

            if (k == 0) return r;

            ulong newl = (l << k) | (r >> (64 - k));
            ulong newr = (r << k) | (l >> (64 - k));

            return newr;
        }

        public static void DecryptBlock(State state, byte* input, byte* output)
        {
        
        }

        static void Encrypt64(ulong *l, ulong *r, ulong k)
        {
            ulong lCopy = *l;
            F(l, k);
            *l ^= *r;
            *r = lCopy;
        }

        private static void F(ulong* x, ulong k)
        {
            *x ^= k;

            S(x);
            P(x);
        }

        static void S(ulong* input)
        {
            byte* x = stackalloc byte[8];
            MemMap.ToBytes1ULongBE(input[0], x, 0);

            x[0] = s1[x[0]]; 
            x[1] = s2[x[1]]; 
            x[2] = s3[x[2]]; 
            x[3] = s4[x[3]]; 
            x[4] = s2[x[4]]; 
            x[5] = s3[x[5]]; 
            x[6] = s4[x[6]]; 
            x[7] = s1[x[7]];

            ulong result = MemMap.ToULong8BytesBE(x, 0);

            *input = result;
        }

        static void P(ulong* input)
        {
            byte* x = stackalloc byte[8];
            byte* r = stackalloc byte[8];

            MemMap.ToBytes1ULongBE(input, 0, x, 0);

            r[0] = (byte)(x[0] ^ x[2] ^ x[3] ^ x[5] ^ x[6] ^ x[7]);
            r[1] = (byte)(x[0] ^ x[1] ^ x[3] ^ x[4] ^ x[6] ^ x[7]);
            r[2] = (byte)(x[0] ^ x[1] ^ x[2] ^ x[4] ^ x[5] ^ x[7]);
            r[3] = (byte)(x[1] ^ x[2] ^ x[3] ^ x[4] ^ x[5] ^ x[6]);
            r[4] = (byte)(x[0] ^ x[1] ^ x[5] ^ x[6] ^ x[7]);
            r[5] = (byte)(x[1] ^ x[2] ^ x[4] ^ x[6] ^ x[7]);
            r[6] = (byte)(x[2] ^ x[3] ^ x[4] ^ x[5] ^ x[7]);
            r[7] = (byte)(x[0] ^ x[3] ^ x[4] ^ x[5] ^ x[6]);

            MemMap.ToULong8BytesBE(r, 0, input, 0);
        }

static readonly ulong[] sigma = {
0xa09e667f3bcc908b,
0xb67ae8584caa73b2,
0xc6ef372fe94f82be,
0x54ff53a5f1d36f1c,
0x10e527fade682d1d,
0xb05688c2b3e6c1fd
};

        private static readonly byte[] s1 = new byte[]
        {
            112,130, 44,236,179, 39,192,229,228,133, 87, 53,234, 12,174, 65,
             35,239,107,147, 69, 25,165, 33,237, 14, 79, 78, 29,101,146,189,
            134,184,175,143,124,235, 31,206, 62, 48,220, 95, 94,197, 11, 26,
            166,225, 57,202,213, 71, 93, 61,217,  1, 90,214, 81, 86,108, 77,
            139, 13,154,102,251,204,176, 45,116, 18, 43, 32,240,177,132,153,
            223, 76,203,194, 52,126,118,  5,109,183,169, 49,209, 23,  4,215,
             20, 88, 58, 97,222, 27, 17, 28, 50, 15,156, 22, 83, 24,242, 34,
            254, 68,207,178,195,181,122,145, 36,  8,232,168, 96,252,105, 80,
            170,208,160,125,161,137, 98,151, 84, 91, 30,149,224,255,100,210,
             16,196,  0, 72,163,247,117,219,138,  3,230,218,  9, 63,221,148,
            135, 92,131,  2,205, 74,144, 51,115,103,246,243,157,127,191,226,
             82,155,216, 38,200, 55,198, 59,129,150,111, 75, 19,190, 99, 46,
            233,121,167,140,159,110,188,142, 41,245,249,182, 47,253,180, 89,
            120,152,  6,106,231, 70,113,186,212, 37,171, 66,136,162,141,250,
            114,  7,185, 85,248,238,172, 10, 54, 73, 42,104, 60, 56,241,164,
             64, 40,211,123,187,201, 67,193, 21,227,173,244,119,199,128,158
        };


private static readonly byte[] s2 = new byte[]
{
0xE0, 0x05, 0x58, 0xD9, 0x67, 0x4E, 0x81, 0xCB, 0xC9, 0x0B, 0xAE, 0x6A, 0xD5, 0x18, 0x5D, 0x82,
0x46, 0xDF, 0xD6, 0x27, 0x8A, 0x32, 0x4B, 0x42, 0xDB, 0x1C, 0x9E, 0x9C, 0x3A, 0xCA, 0x25, 0x7B,
0x0D, 0x71, 0x5F, 0x1F, 0xF8, 0xD7, 0x3E, 0x9D, 0x7C, 0x60, 0xB9, 0xBE, 0xBC, 0x8B, 0x16, 0x34,
0x4D, 0xC3, 0x72, 0x95, 0xAB, 0x8E, 0xBA, 0x7A, 0xB3, 0x02, 0xB4, 0xAD, 0xA2, 0xAC, 0xD8, 0x9A,
0x17, 0x1A, 0x35, 0xCC, 0xF7, 0x99, 0x61, 0x5A, 0xE8, 0x24, 0x56, 0x40, 0xE1, 0x63, 0x09, 0x33,
0xBF, 0x98, 0x97, 0x85, 0x68, 0xFC, 0xEC, 0x0A, 0xDA, 0x6F, 0x53, 0x62, 0xA3, 0x2E, 0x08, 0xAF,
0x28, 0xB0, 0x74, 0xC2, 0xBD, 0x36, 0x22, 0x38, 0x64, 0x1E, 0x39, 0x2C, 0xA6, 0x30, 0xE5, 0x44,
0xFD, 0x88, 0x9F, 0x65, 0x87, 0x6B, 0xF4, 0x23, 0x48, 0x10, 0xD1, 0x51, 0xC0, 0xF9, 0xD2, 0xA0,
0x55, 0xA1, 0x41, 0xFA, 0x43, 0x13, 0xC4, 0x2F, 0xA8, 0xB6, 0x3C, 0x2B, 0xC1, 0xFF, 0xC8, 0xA5,
0x20, 0x89, 0x00, 0x90, 0x47, 0xEF, 0xEA, 0xB7, 0x15, 0x06, 0xCD, 0xB5, 0x12, 0x7E, 0xBB, 0x29,
0x0F, 0xB8, 0x07, 0x04, 0x9B, 0x94, 0x21, 0x66, 0xE6, 0xCE, 0xED, 0xE7, 0x3B, 0xFE, 0x7F, 0xC5,
0xA4, 0x37, 0xB1, 0x4C, 0x91, 0x6E, 0x8D, 0x76, 0x03, 0x2D, 0xDE, 0x96, 0x26, 0x7D, 0xC6, 0x5C,
0xD3, 0xF2, 0x4F, 0x19, 0x3F, 0xDC, 0x79, 0x1D, 0x52, 0xEB, 0xF3, 0x6D, 0x5E, 0xFB, 0x69, 0xB2,
0xF0, 0x31, 0x0C, 0xD4, 0xCF, 0x8C, 0xE2, 0x75, 0xA9, 0x4A, 0x57, 0x84, 0x11, 0x45, 0x1B, 0xF5,
0xE4, 0x0E, 0x73, 0xAA, 0xF1, 0xDD, 0x59, 0x14, 0x6C, 0x92, 0x54, 0xD0, 0x78, 0x70, 0xE3, 0x49,
0x80, 0x50, 0xA7, 0xF6, 0x77, 0x93, 0x86, 0x83, 0x2A, 0xC7, 0x5B, 0xE9, 0xEE, 0x8F, 0x01, 0x3D,
};

private static readonly byte[] s3 = new byte[] 
{
0x38, 0x41, 0x16, 0x76, 0xD9, 0x93, 0x60, 0xF2, 0x72, 0xC2, 0xAB, 0x9A, 0x75, 0x06, 0x57, 0xA0,
0x91, 0xF7, 0xB5, 0xC9, 0xA2, 0x8C, 0xD2, 0x90, 0xF6, 0x07, 0xA7, 0x27, 0x8E, 0xB2, 0x49, 0xDE,
0x43, 0x5C, 0xD7, 0xC7, 0x3E, 0xF5, 0x8F, 0x67, 0x1F, 0x18, 0x6E, 0xAF, 0x2F, 0xE2, 0x85, 0x0D,
0x53, 0xF0, 0x9C, 0x65, 0xEA, 0xA3, 0xAE, 0x9E, 0xEC, 0x80, 0x2D, 0x6B, 0xA8, 0x2B, 0x36, 0xA6,
0xC5, 0x86, 0x4D, 0x33, 0xFD, 0x66, 0x58, 0x96, 0x3A, 0x09, 0x95, 0x10, 0x78, 0xD8, 0x42, 0xCC,
0xEF, 0x26, 0xE5, 0x61, 0x1A, 0x3F, 0x3B, 0x82, 0xB6, 0xDB, 0xD4, 0x98, 0xE8, 0x8B, 0x02, 0xEB,
0x0A, 0x2C, 0x1D, 0xB0, 0x6F, 0x8D, 0x88, 0x0E, 0x19, 0x87, 0x4E, 0x0B, 0xA9, 0x0C, 0x79, 0x11,
0x7F, 0x22, 0xE7, 0x59, 0xE1, 0xDA, 0x3D, 0xC8, 0x12, 0x04, 0x74, 0x54, 0x30, 0x7E, 0xB4, 0x28,
0x55, 0x68, 0x50, 0xBE, 0xD0, 0xC4, 0x31, 0xCB, 0x2A, 0xAD, 0x0F, 0xCA, 0x70, 0xFF, 0x32, 0x69,
0x08, 0x62, 0x00, 0x24, 0xD1, 0xFB, 0xBA, 0xED, 0x45, 0x81, 0x73, 0x6D, 0x84, 0x9F, 0xEE, 0x4A,
0xC3, 0x2E, 0xC1, 0x01, 0xE6, 0x25, 0x48, 0x99, 0xB9, 0xB3, 0x7B, 0xF9, 0xCE, 0xBF, 0xDF, 0x71,
0x29, 0xCD, 0x6C, 0x13, 0x64, 0x9B, 0x63, 0x9D, 0xC0, 0x4B, 0xB7, 0xA5, 0x89, 0x5F, 0xB1, 0x17,
0xF4, 0xBC, 0xD3, 0x46, 0xCF, 0x37, 0x5E, 0x47, 0x94, 0xFA, 0xFC, 0x5B, 0x97, 0xFE, 0x5A, 0xAC,
0x3C, 0x4C, 0x03, 0x35, 0xF3, 0x23, 0xB8, 0x5D, 0x6A, 0x92, 0xD5, 0x21, 0x44, 0x51, 0xC6, 0x7D,
0x39, 0x83, 0xDC, 0xAA, 0x7C, 0x77, 0x56, 0x05, 0x1B, 0xA4, 0x15, 0x34, 0x1E, 0x1C, 0xF8, 0x52,
0x20, 0x14, 0xE9, 0xBD, 0xDD, 0xE4, 0xA1, 0xE0, 0x8A, 0xF1, 0xD6, 0x7A, 0xBB, 0xE3, 0x40, 0x4F,
};

private static readonly byte[] s4 = new byte[]
{
0x70, 0x2C, 0xB3, 0xC0, 0xE4, 0x57, 0xEA, 0xAE, 0x23, 0x6B, 0x45, 0xA5, 0xED, 0x4F, 0x1D, 0x92,
0x86, 0xAF, 0x7C, 0x1F, 0x3E, 0xDC, 0x5E, 0x0B, 0xA6, 0x39, 0xD5, 0x5D, 0xD9, 0x5A, 0x51, 0x6C,
0x8B, 0x9A, 0xFB, 0xB0, 0x74, 0x2B, 0xF0, 0x84, 0xDF, 0xCB, 0x34, 0x76, 0x6D, 0xA9, 0xD1, 0x04,
0x14, 0x3A, 0xDE, 0x11, 0x32, 0x9C, 0x53, 0xF2, 0xFE, 0xCF, 0xC3, 0x7A, 0x24, 0xE8, 0x60, 0x69,
0xAA, 0xA0, 0xA1, 0x62, 0x54, 0x1E, 0xE0, 0x64, 0x10, 0x00, 0xA3, 0x75, 0x8A, 0xE6, 0x09, 0xDD,
0x87, 0x83, 0xCD, 0x90, 0x73, 0xF6, 0x9D, 0xBF, 0x52, 0xD8, 0xC8, 0xC6, 0x81, 0x6F, 0x13, 0x63,
0xE9, 0xA7, 0x9F, 0xBC, 0x29, 0xF9, 0x2F, 0xB4, 0x78, 0x06, 0xE7, 0x71, 0xD4, 0xAB, 0x88, 0x8D,
0x72, 0xB9, 0xF8, 0xAC, 0x36, 0x2A, 0x3C, 0xF1, 0x40, 0xD3, 0xBB, 0x43, 0x15, 0xAD, 0x77, 0x80,
0x82, 0xEC, 0x27, 0xE5, 0x85, 0x35, 0x0C, 0x41, 0xEF, 0x93, 0x19, 0x21, 0x0E, 0x4E, 0x65, 0xBD,
0xB8, 0x8F, 0xEB, 0xCE, 0x30, 0x5F, 0xC5, 0x1A, 0xE1, 0xCA, 0x47, 0x3D, 0x01, 0xD6, 0x56, 0x4D,
0x0D, 0x66, 0xCC, 0x2D, 0x12, 0x20, 0xB1, 0x99, 0x4C, 0xC2, 0x7E, 0x05, 0xB7, 0x31, 0x17, 0xD7,
0x58, 0x61, 0x1B, 0x1C, 0x0F, 0x16, 0x18, 0x22, 0x44, 0xB2, 0xB5, 0x91, 0x08, 0xA8, 0xFC, 0x50,
0xD0, 0x7D, 0x89, 0x97, 0x5B, 0x95, 0xFF, 0xD2, 0xC4, 0x48, 0xF7, 0xDB, 0x03, 0xDA, 0x3F, 0x94,
0x5C, 0x02, 0x4A, 0x33, 0x67, 0xF3, 0x7F, 0xE2, 0x9B, 0x26, 0x37, 0x3B, 0x96, 0x4B, 0xBE, 0x2E,
0x79, 0x8C, 0x6E, 0x8E, 0xF5, 0xB6, 0xFD, 0x59, 0x98, 0x6A, 0x46, 0xBA, 0x25, 0x42, 0xA2, 0xFA,
0x07, 0x55, 0xEE, 0x0A, 0x49, 0x68, 0x38, 0xA4, 0x28, 0x7B, 0xC9, 0xC1, 0xE3, 0xF4, 0xC7, 0x9E,
};

        public static void GenerateSBOX()
        {

            for (int k =2; k<=4;k++)
            {
            Console.WriteLine("s{0}", k);

            for (int i = 0; i < 16; i++)
            {
                for (int j = 0; j < 16; j++)
                {
                    byte q = (byte)((16 * i) + j);
                    byte b = s1[(byte)((16 * i) + j)];

                    if (k == 2) Console.Write("0x{0:X2}, ", (byte)(b << 1) | (byte)( b >> 7));
                    else if (k == 3) Console.Write("0x{0:X2}, ", (byte)(b >> 1) | (byte)(b << 7));
                    else 
                    {
                        Console.Write("0x{0:X2}, ", s1[(byte)(q << 1) | (byte)(q >> 7)]);
                    }

                }

                Console.WriteLine();
            }
            }
        }
    }
}
